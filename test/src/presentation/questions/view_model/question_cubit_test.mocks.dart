// Mocks generated by Mockito 5.4.5 from annotations
// in quize_app/test/src/presentation/questions/view_model/question_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:quize_app/core/api/common/api_result.dart' as _i5;
import 'package:quize_app/src/domain/entities/question_entity.dart' as _i6;
import 'package:quize_app/src/domain/repositories/question_repository.dart'
    as _i2;
import 'package:quize_app/src/domain/use_case/get_all_question_on_exam_by_id_use_case.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQuestionRepository_0 extends _i1.SmartFake
    implements _i2.QuestionRepository {
  _FakeQuestionRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllQuestionOnExamByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllQuestionOnExamByIdUseCase extends _i1.Mock
    implements _i3.GetAllQuestionOnExamByIdUseCase {
  @override
  _i2.QuestionRepository get questionRepository => (super.noSuchMethod(
        Invocation.getter(#questionRepository),
        returnValue: _FakeQuestionRepository_0(
          this,
          Invocation.getter(#questionRepository),
        ),
        returnValueForMissingStub: _FakeQuestionRepository_0(
          this,
          Invocation.getter(#questionRepository),
        ),
      ) as _i2.QuestionRepository);

  @override
  _i4.Future<_i5.Result<List<_i6.QuestionEntity>>> invoke(
          {required String? examId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #invoke,
          [],
          {#examId: examId},
        ),
        returnValue: _i4.Future<_i5.Result<List<_i6.QuestionEntity>>>.value(
            _i7.dummyValue<_i5.Result<List<_i6.QuestionEntity>>>(
          this,
          Invocation.method(
            #invoke,
            [],
            {#examId: examId},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i5.Result<List<_i6.QuestionEntity>>>.value(
                _i7.dummyValue<_i5.Result<List<_i6.QuestionEntity>>>(
          this,
          Invocation.method(
            #invoke,
            [],
            {#examId: examId},
          ),
        )),
      ) as _i4.Future<_i5.Result<List<_i6.QuestionEntity>>>);
}
