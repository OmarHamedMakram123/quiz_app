// Mocks generated by Mockito 5.4.5 from annotations
// in quize_app/test/src/data/repositories/exam_repository_impl/exam_repository_imol_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:quize_app/src/data/data_source/offline_data_source/result_offline_data_source/model/exam_cache_model/exam_cached_model.dart'
    as _i3;
import 'package:quize_app/src/data/data_source/online_data_source/exam_online_data_source/exam_online_data_source.dart'
    as _i4;
import 'package:quize_app/src/data/mappers/exam_mapper.dart' as _i6;
import 'package:quize_app/src/data/model/response/exam_response_model/exam_response_model.dart'
    as _i2;
import 'package:quize_app/src/domain/entities/exam_entity.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExamResponseModel_0 extends _i1.SmartFake
    implements _i2.ExamResponseModel {
  _FakeExamResponseModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExamCachedModel_1 extends _i1.SmartFake
    implements _i3.ExamCachedModel {
  _FakeExamCachedModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExamOnlineDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockExamOnlineDataSource extends _i1.Mock
    implements _i4.ExamOnlineDataSource {
  MockExamOnlineDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.ExamResponseModel> getExamOnSubjectId(
          {required String? subjectId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExamOnSubjectId,
          [],
          {#subjectId: subjectId},
        ),
        returnValue:
            _i5.Future<_i2.ExamResponseModel>.value(_FakeExamResponseModel_0(
          this,
          Invocation.method(
            #getExamOnSubjectId,
            [],
            {#subjectId: subjectId},
          ),
        )),
      ) as _i5.Future<_i2.ExamResponseModel>);
}

/// A class which mocks [ExamMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockExamMapper extends _i1.Mock implements _i6.ExamMapper {
  MockExamMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.ExamEntity> toExamEntity(_i2.ExamResponseModel? examResponseModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #toExamEntity,
          [examResponseModel],
        ),
        returnValue: <_i7.ExamEntity>[],
      ) as List<_i7.ExamEntity>);

  @override
  _i3.ExamCachedModel toExamCachedModel(
          {required _i7.ExamEntity? examEntity}) =>
      (super.noSuchMethod(
        Invocation.method(
          #toExamCachedModel,
          [],
          {#examEntity: examEntity},
        ),
        returnValue: _FakeExamCachedModel_1(
          this,
          Invocation.method(
            #toExamCachedModel,
            [],
            {#examEntity: examEntity},
          ),
        ),
      ) as _i3.ExamCachedModel);

  @override
  List<_i7.ExamEntity> toExamEntityCached(
          {required List<_i3.ExamCachedModel>? examsCached}) =>
      (super.noSuchMethod(
        Invocation.method(
          #toExamEntityCached,
          [],
          {#examsCached: examsCached},
        ),
        returnValue: <_i7.ExamEntity>[],
      ) as List<_i7.ExamEntity>);
}
